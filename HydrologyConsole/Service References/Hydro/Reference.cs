//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HydrologyConsole.Hydro {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="DataValueCollection", Namespace="http://schemas.datacontract.org/2004/07/", ItemName="DataValue")]
    [System.SerializableAttribute()]
    public class DataValueCollection : System.Collections.Generic.List<HydrologyCore.Hydro.DataValue> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="WaterObjectCollection", Namespace="http://schemas.datacontract.org/2004/07/", ItemName="WaterObject")]
    [System.SerializableAttribute()]
    public class WaterObjectCollection : System.Collections.Generic.List<HydrologyCore.Hydro.WaterObject> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="SiteTypeCollection", Namespace="http://schemas.datacontract.org/2004/07/", ItemName="SiteType")]
    [System.SerializableAttribute()]
    public class SiteTypeCollection : System.Collections.Generic.List<HydrologyCore.Hydro.SiteType> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="VariableCollection", Namespace="http://schemas.datacontract.org/2004/07/", ItemName="Variable")]
    [System.SerializableAttribute()]
    public class VariableCollection : System.Collections.Generic.List<HydrologyCore.Hydro.Variable> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="SiteGroupCollection", Namespace="http://schemas.datacontract.org/2004/07/", ItemName="SiteGroup")]
    [System.SerializableAttribute()]
    public class SiteGroupCollection : System.Collections.Generic.List<HydrologyCore.Hydro.SiteGroup> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="SiteAttributeCollection", Namespace="http://schemas.datacontract.org/2004/07/", ItemName="SiteAttribute")]
    [System.SerializableAttribute()]
    public class SiteAttributeCollection : System.Collections.Generic.List<HydrologyCore.Hydro.SiteAttribute> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Hydro.IHydroService")]
    public interface IHydroService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/Hello", ReplyAction="http://tempuri.org/IHydroService/HelloResponse")]
        string Hello(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/Hello", ReplyAction="http://tempuri.org/IHydroService/HelloResponse")]
        System.Threading.Tasks.Task<string> HelloAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/SetData", ReplyAction="http://tempuri.org/IHydroService/SetDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/SetDataInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/SetDataInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        void SetData(HydrologyCore.Hydro.Site site, HydrologyConsole.Hydro.DataValueCollection dataValueColl, HydrologyCore.Hydro.DataSource dataSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/SetData", ReplyAction="http://tempuri.org/IHydroService/SetDataResponse")]
        System.Threading.Tasks.Task SetDataAsync(HydrologyCore.Hydro.Site site, HydrologyConsole.Hydro.DataValueCollection dataValueColl, HydrologyCore.Hydro.DataSource dataSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataValue", ReplyAction="http://tempuri.org/IHydroService/GetDataValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetDataValueInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetDataValueInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.DataValue GetDataValue(int siteId, System.DateTime utcDate, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataValue", ReplyAction="http://tempuri.org/IHydroService/GetDataValueResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.DataValue> GetDataValueAsync(int siteId, System.DateTime utcDate, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataValues", ReplyAction="http://tempuri.org/IHydroService/GetDataValuesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetDataValuesInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetDataValuesInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyConsole.Hydro.DataValueCollection GetDataValues(int siteId, System.DateTime utcBeginDate, System.DateTime utcEndDate, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue, System.Nullable<int> stepInHours);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataValues", ReplyAction="http://tempuri.org/IHydroService/GetDataValuesResponse")]
        System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetDataValuesAsync(int siteId, System.DateTime utcBeginDate, System.DateTime utcEndDate, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue, System.Nullable<int> stepInHours);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataValuesForReport", ReplyAction="http://tempuri.org/IHydroService/GetDataValuesForReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetDataValuesForReportInnerServiceExceptionFault" +
            "", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetDataValuesForReportInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyConsole.Hydro.DataValueCollection GetDataValuesForReport(int siteId, System.DateTime utcBeginDate, System.DateTime utcEndDate, System.Nullable<int> variableId, int srokUTC, System.Nullable<int> reportId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataValuesForReport", ReplyAction="http://tempuri.org/IHydroService/GetDataValuesForReportResponse")]
        System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetDataValuesForReportAsync(int siteId, System.DateTime utcBeginDate, System.DateTime utcEndDate, System.Nullable<int> variableId, int srokUTC, System.Nullable<int> reportId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetAllDataValue", ReplyAction="http://tempuri.org/IHydroService/GetAllDataValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetAllDataValueInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetAllDataValueInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyConsole.Hydro.DataValueCollection GetAllDataValue(int siteId, System.DateTime utcDate, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetAllDataValue", ReplyAction="http://tempuri.org/IHydroService/GetAllDataValueResponse")]
        System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetAllDataValueAsync(int siteId, System.DateTime utcDate, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetAllDataValueLocal", ReplyAction="http://tempuri.org/IHydroService/GetAllDataValueLocalResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetAllDataValueLocalInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetAllDataValueLocalInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyConsole.Hydro.DataValueCollection GetAllDataValueLocal(int siteId, System.DateTime date, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetAllDataValueLocal", ReplyAction="http://tempuri.org/IHydroService/GetAllDataValueLocalResponse")]
        System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetAllDataValueLocalAsync(int siteId, System.DateTime date, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataValueLocal", ReplyAction="http://tempuri.org/IHydroService/GetDataValueLocalResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetDataValueLocalInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetDataValueLocalInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.DataValue GetDataValueLocal(int siteId, System.DateTime date, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataValueLocal", ReplyAction="http://tempuri.org/IHydroService/GetDataValueLocalResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.DataValue> GetDataValueLocalAsync(int siteId, System.DateTime date, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataValuesLocal", ReplyAction="http://tempuri.org/IHydroService/GetDataValuesLocalResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetDataValuesLocalInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetDataValuesLocalInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyConsole.Hydro.DataValueCollection GetDataValuesLocal(int siteId, System.DateTime beginDate, System.DateTime endDate, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue, System.Nullable<int> stepInHours);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataValuesLocal", ReplyAction="http://tempuri.org/IHydroService/GetDataValuesLocalResponse")]
        System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetDataValuesLocalAsync(int siteId, System.DateTime beginDate, System.DateTime endDate, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue, System.Nullable<int> stepInHours);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataValuesForReportLocal", ReplyAction="http://tempuri.org/IHydroService/GetDataValuesForReportLocalResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetDataValuesForReportLocalInputDataExceptionFau" +
            "lt", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetDataValuesForReportLocalInnerServiceException" +
            "Fault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyConsole.Hydro.DataValueCollection GetDataValuesForReportLocal(int siteId, System.DateTime beginDate, System.DateTime endDate, System.Nullable<int> variableId, int srokUTC, System.Nullable<int> reportId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataValuesForReportLocal", ReplyAction="http://tempuri.org/IHydroService/GetDataValuesForReportLocalResponse")]
        System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetDataValuesForReportLocalAsync(int siteId, System.DateTime beginDate, System.DateTime endDate, System.Nullable<int> variableId, int srokUTC, System.Nullable<int> reportId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetWaterObjects", ReplyAction="http://tempuri.org/IHydroService/GetWaterObjectsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetWaterObjectsInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyConsole.Hydro.WaterObjectCollection GetWaterObjects(bool withTree);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetWaterObjects", ReplyAction="http://tempuri.org/IHydroService/GetWaterObjectsResponse")]
        System.Threading.Tasks.Task<HydrologyConsole.Hydro.WaterObjectCollection> GetWaterObjectsAsync(bool withTree);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSitesWithoutWaterObject", ReplyAction="http://tempuri.org/IHydroService/GetSitesWithoutWaterObjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetSitesWithoutWaterObjectInnerServiceExceptionF" +
            "ault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.Site[] GetSitesWithoutWaterObject();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSitesWithoutWaterObject", ReplyAction="http://tempuri.org/IHydroService/GetSitesWithoutWaterObjectResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.Site[]> GetSitesWithoutWaterObjectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetWaterObjectBySite", ReplyAction="http://tempuri.org/IHydroService/GetWaterObjectBySiteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetWaterObjectBySiteInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetWaterObjectBySiteInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyConsole.Hydro.WaterObjectCollection GetWaterObjectBySite(int siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetWaterObjectBySite", ReplyAction="http://tempuri.org/IHydroService/GetWaterObjectBySiteResponse")]
        System.Threading.Tasks.Task<HydrologyConsole.Hydro.WaterObjectCollection> GetWaterObjectBySiteAsync(int siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/SaveWaterObject", ReplyAction="http://tempuri.org/IHydroService/SaveWaterObjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/SaveWaterObjectInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/SaveWaterObjectInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        void SaveWaterObject(HydrologyCore.Hydro.WaterObject waterObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/SaveWaterObject", ReplyAction="http://tempuri.org/IHydroService/SaveWaterObjectResponse")]
        System.Threading.Tasks.Task SaveWaterObjectAsync(HydrologyCore.Hydro.WaterObject waterObject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/SaveWaterObjectOrder", ReplyAction="http://tempuri.org/IHydroService/SaveWaterObjectOrderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/SaveWaterObjectOrderInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/SaveWaterObjectOrderInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        void SaveWaterObjectOrder(HydrologyConsole.Hydro.WaterObjectCollection coll);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/SaveWaterObjectOrder", ReplyAction="http://tempuri.org/IHydroService/SaveWaterObjectOrderResponse")]
        System.Threading.Tasks.Task SaveWaterObjectOrderAsync(HydrologyConsole.Hydro.WaterObjectCollection coll);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetAllGeoTypes", ReplyAction="http://tempuri.org/IHydroService/GetAllGeoTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetAllGeoTypesInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.GeoType[] GetAllGeoTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetAllGeoTypes", ReplyAction="http://tempuri.org/IHydroService/GetAllGeoTypesResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.GeoType[]> GetAllGeoTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetGeoType", ReplyAction="http://tempuri.org/IHydroService/GetGeoTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetGeoTypeInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetGeoTypeInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.GeoType GetGeoType(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetGeoType", ReplyAction="http://tempuri.org/IHydroService/GetGeoTypeResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.GeoType> GetGeoTypeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetLastClimateInfo", ReplyAction="http://tempuri.org/IHydroService/GetLastClimateInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetLastClimateInfoInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetLastClimateInfoInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.ClimateInfo GetLastClimateInfo(int siteId, int climateInfoTypeId, int variableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetLastClimateInfo", ReplyAction="http://tempuri.org/IHydroService/GetLastClimateInfoResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.ClimateInfo> GetLastClimateInfoAsync(int siteId, int climateInfoTypeId, int variableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetLastSiteCriteria", ReplyAction="http://tempuri.org/IHydroService/GetLastSiteCriteriaResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetLastSiteCriteriaInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetLastSiteCriteriaInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.Criteria[] GetLastSiteCriteria(int siteId, int variableId, System.Nullable<int> criteriaTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetLastSiteCriteria", ReplyAction="http://tempuri.org/IHydroService/GetLastSiteCriteriaResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.Criteria[]> GetLastSiteCriteriaAsync(int siteId, int variableId, System.Nullable<int> criteriaTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSiteCriterias", ReplyAction="http://tempuri.org/IHydroService/GetSiteCriteriasResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetSiteCriteriasInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetSiteCriteriasInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.Criteria[] GetSiteCriterias(int siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSiteCriterias", ReplyAction="http://tempuri.org/IHydroService/GetSiteCriteriasResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.Criteria[]> GetSiteCriteriasAsync(int siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/SaveCriteria", ReplyAction="http://tempuri.org/IHydroService/SaveCriteriaResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/SaveCriteriaInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/SaveCriteriaInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.Criteria SaveCriteria(HydrologyCore.Hydro.Criteria criteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/SaveCriteria", ReplyAction="http://tempuri.org/IHydroService/SaveCriteriaResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.Criteria> SaveCriteriaAsync(HydrologyCore.Hydro.Criteria criteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetCriteriaTypes", ReplyAction="http://tempuri.org/IHydroService/GetCriteriaTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetCriteriaTypesInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.CriteriaType[] GetCriteriaTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetCriteriaTypes", ReplyAction="http://tempuri.org/IHydroService/GetCriteriaTypesResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.CriteriaType[]> GetCriteriaTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSitesByWaterObject", ReplyAction="http://tempuri.org/IHydroService/GetSitesByWaterObjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetSitesByWaterObjectInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetSitesByWaterObjectInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.Site[] GetSitesByWaterObject(int waterObjectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSitesByWaterObject", ReplyAction="http://tempuri.org/IHydroService/GetSitesByWaterObjectResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.Site[]> GetSitesByWaterObjectAsync(int waterObjectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSiteList", ReplyAction="http://tempuri.org/IHydroService/GetSiteListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetSiteListInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.Site[] GetSiteList(System.Nullable<int> siteTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSiteList", ReplyAction="http://tempuri.org/IHydroService/GetSiteListResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.Site[]> GetSiteListAsync(System.Nullable<int> siteTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSite", ReplyAction="http://tempuri.org/IHydroService/GetSiteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetSiteInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetSiteInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.Site GetSite(string siteCode, int typeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSite", ReplyAction="http://tempuri.org/IHydroService/GetSiteResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.Site> GetSiteAsync(string siteCode, int typeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/SaveSiteWithRelation", ReplyAction="http://tempuri.org/IHydroService/SaveSiteWithRelationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/SaveSiteWithRelationInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/SaveSiteWithRelationInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.Site SaveSiteWithRelation(HydrologyCore.Hydro.Site site, HydrologyCore.Hydro.WaterObject wo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/SaveSiteWithRelation", ReplyAction="http://tempuri.org/IHydroService/SaveSiteWithRelationResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.Site> SaveSiteWithRelationAsync(HydrologyCore.Hydro.Site site, HydrologyCore.Hydro.WaterObject wo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSiteListWithParent", ReplyAction="http://tempuri.org/IHydroService/GetSiteListWithParentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetSiteListWithParentInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetSiteListWithParentInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.Site[] GetSiteListWithParent(int siteTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSiteListWithParent", ReplyAction="http://tempuri.org/IHydroService/GetSiteListWithParentResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.Site[]> GetSiteListWithParentAsync(int siteTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSiteTypes", ReplyAction="http://tempuri.org/IHydroService/GetSiteTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetSiteTypesInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetSiteTypesInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyConsole.Hydro.SiteTypeCollection GetSiteTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSiteTypes", ReplyAction="http://tempuri.org/IHydroService/GetSiteTypesResponse")]
        System.Threading.Tasks.Task<HydrologyConsole.Hydro.SiteTypeCollection> GetSiteTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetVariable", ReplyAction="http://tempuri.org/IHydroService/GetVariableResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetVariableInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetVariableInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.Variable GetVariable(int variableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetVariable", ReplyAction="http://tempuri.org/IHydroService/GetVariableResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.Variable> GetVariableAsync(int variableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSiteTypeVariables", ReplyAction="http://tempuri.org/IHydroService/GetSiteTypeVariablesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetSiteTypeVariablesInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetSiteTypeVariablesInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyConsole.Hydro.VariableCollection GetSiteTypeVariables(int siteTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSiteTypeVariables", ReplyAction="http://tempuri.org/IHydroService/GetSiteTypeVariablesResponse")]
        System.Threading.Tasks.Task<HydrologyConsole.Hydro.VariableCollection> GetSiteTypeVariablesAsync(int siteTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetAllSiteGroups", ReplyAction="http://tempuri.org/IHydroService/GetAllSiteGroupsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetAllSiteGroupsInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyConsole.Hydro.SiteGroupCollection GetAllSiteGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetAllSiteGroups", ReplyAction="http://tempuri.org/IHydroService/GetAllSiteGroupsResponse")]
        System.Threading.Tasks.Task<HydrologyConsole.Hydro.SiteGroupCollection> GetAllSiteGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetAttributesForSite", ReplyAction="http://tempuri.org/IHydroService/GetAttributesForSiteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetAttributesForSiteInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetAttributesForSiteInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyConsole.Hydro.SiteAttributeCollection GetAttributesForSite(int siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetAttributesForSite", ReplyAction="http://tempuri.org/IHydroService/GetAttributesForSiteResponse")]
        System.Threading.Tasks.Task<HydrologyConsole.Hydro.SiteAttributeCollection> GetAttributesForSiteAsync(int siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSiteAttributeTypes", ReplyAction="http://tempuri.org/IHydroService/GetSiteAttributeTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetSiteAttributeTypesInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetSiteAttributeTypesInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.SiteAttributeType[] GetSiteAttributeTypes(int siteTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSiteAttributeTypes", ReplyAction="http://tempuri.org/IHydroService/GetSiteAttributeTypesResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.SiteAttributeType[]> GetSiteAttributeTypesAsync(int siteTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/SaveSiteAttribute", ReplyAction="http://tempuri.org/IHydroService/SaveSiteAttributeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/SaveSiteAttributeInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/SaveSiteAttributeInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        void SaveSiteAttribute(HydrologyCore.Hydro.SiteAttribute attr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/SaveSiteAttribute", ReplyAction="http://tempuri.org/IHydroService/SaveSiteAttributeResponse")]
        System.Threading.Tasks.Task SaveSiteAttributeAsync(HydrologyCore.Hydro.SiteAttribute attr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSiteAttribute", ReplyAction="http://tempuri.org/IHydroService/GetSiteAttributeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetSiteAttributeInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetSiteAttributeInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.SiteAttribute GetSiteAttribute(int siteId, int siteAttrTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSiteAttribute", ReplyAction="http://tempuri.org/IHydroService/GetSiteAttributeResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.SiteAttribute> GetSiteAttributeAsync(int siteId, int siteAttrTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSensorDifferences", ReplyAction="http://tempuri.org/IHydroService/GetSensorDifferencesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetSensorDifferencesInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetSensorDifferencesInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.SensorDifference GetSensorDifferences(HydrologyCore.Hydro.Site site1, HydrologyCore.Hydro.Site site2, int variableId, System.DateTime utcBeginDate, System.DateTime utcEndDate, float delta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetSensorDifferences", ReplyAction="http://tempuri.org/IHydroService/GetSensorDifferencesResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.SensorDifference> GetSensorDifferencesAsync(HydrologyCore.Hydro.Site site1, HydrologyCore.Hydro.Site site2, int variableId, System.DateTime utcBeginDate, System.DateTime utcEndDate, float delta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataValueFromId", ReplyAction="http://tempuri.org/IHydroService/GetDataValueFromIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetDataValueFromIdInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetDataValueFromIdInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyConsole.Hydro.DataValueCollection GetDataValueFromId(int siteId, int variableId, int dataValueId, bool isCalc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataValueFromId", ReplyAction="http://tempuri.org/IHydroService/GetDataValueFromIdResponse")]
        System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetDataValueFromIdAsync(int siteId, int variableId, int dataValueId, bool isCalc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataSource", ReplyAction="http://tempuri.org/IHydroService/GetDataSourceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetDataSourceInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetDataSourceInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.DataSource GetDataSource(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataSource", ReplyAction="http://tempuri.org/IHydroService/GetDataSourceResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.DataSource> GetDataSourceAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetCurve", ReplyAction="http://tempuri.org/IHydroService/GetCurveResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetCurveInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetCurveInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.Curve GetCurve(int siteId, int variableXId, int variableYId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetCurve", ReplyAction="http://tempuri.org/IHydroService/GetCurveResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.Curve> GetCurveAsync(int siteId, int variableXId, int variableYId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetQualifiers", ReplyAction="http://tempuri.org/IHydroService/GetQualifiersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetQualifiersInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.Qualifier[] GetQualifiers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetQualifiers", ReplyAction="http://tempuri.org/IHydroService/GetQualifiersResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.Qualifier[]> GetQualifiersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetCategory", ReplyAction="http://tempuri.org/IHydroService/GetCategoryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InputDataException), Action="http://tempuri.org/IHydroService/GetCategoryInputDataExceptionFault", Name="InputDataException", Namespace="http://schemas.datacontract.org/2004/07/")]
        [System.ServiceModel.FaultContractAttribute(typeof(HydrologyCore.Hydro.InnerServiceException), Action="http://tempuri.org/IHydroService/GetCategoryInnerServiceExceptionFault", Name="InnerServiceException", Namespace="http://schemas.datacontract.org/2004/07/")]
        HydrologyCore.Hydro.Category[] GetCategory(int variableId, System.Nullable<int> datavalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetCategory", ReplyAction="http://tempuri.org/IHydroService/GetCategoryResponse")]
        System.Threading.Tasks.Task<HydrologyCore.Hydro.Category[]> GetCategoryAsync(int variableId, System.Nullable<int> datavalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetData", ReplyAction="http://tempuri.org/IHydroService/GetDataResponse")]
        HydrologyConsole.Hydro.DataValueCollection GetData(int siteId, int sourceTypeId, System.DateTime utcDate, int variableId, System.Nullable<int> duration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetData", ReplyAction="http://tempuri.org/IHydroService/GetDataResponse")]
        System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetDataAsync(int siteId, int sourceTypeId, System.DateTime utcDate, int variableId, System.Nullable<int> duration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataByFormDate", ReplyAction="http://tempuri.org/IHydroService/GetDataByFormDateResponse")]
        HydrologyConsole.Hydro.DataValueCollection GetDataByFormDate(int siteId, int sourceTypeId, System.DateTime utcDate, int variableId, System.Nullable<int> duration, System.Nullable<System.DateTime> dateForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetDataByFormDate", ReplyAction="http://tempuri.org/IHydroService/GetDataByFormDateResponse")]
        System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetDataByFormDateAsync(int siteId, int sourceTypeId, System.DateTime utcDate, int variableId, System.Nullable<int> duration, System.Nullable<System.DateTime> dateForm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetAllVariables", ReplyAction="http://tempuri.org/IHydroService/GetAllVariablesResponse")]
        HydrologyConsole.Hydro.VariableCollection GetAllVariables();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHydroService/GetAllVariables", ReplyAction="http://tempuri.org/IHydroService/GetAllVariablesResponse")]
        System.Threading.Tasks.Task<HydrologyConsole.Hydro.VariableCollection> GetAllVariablesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHydroServiceChannel : HydrologyConsole.Hydro.IHydroService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HydroServiceClient : System.ServiceModel.ClientBase<HydrologyConsole.Hydro.IHydroService>, HydrologyConsole.Hydro.IHydroService {
        
        public HydroServiceClient() {
        }
        
        public HydroServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HydroServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HydroServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HydroServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Hello(string name) {
            return base.Channel.Hello(name);
        }
        
        public System.Threading.Tasks.Task<string> HelloAsync(string name) {
            return base.Channel.HelloAsync(name);
        }
        
        public void SetData(HydrologyCore.Hydro.Site site, HydrologyConsole.Hydro.DataValueCollection dataValueColl, HydrologyCore.Hydro.DataSource dataSource) {
            base.Channel.SetData(site, dataValueColl, dataSource);
        }
        
        public System.Threading.Tasks.Task SetDataAsync(HydrologyCore.Hydro.Site site, HydrologyConsole.Hydro.DataValueCollection dataValueColl, HydrologyCore.Hydro.DataSource dataSource) {
            return base.Channel.SetDataAsync(site, dataValueColl, dataSource);
        }
        
        public HydrologyCore.Hydro.DataValue GetDataValue(int siteId, System.DateTime utcDate, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue) {
            return base.Channel.GetDataValue(siteId, utcDate, variableId, offsetTypeId, offsetValue);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.DataValue> GetDataValueAsync(int siteId, System.DateTime utcDate, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue) {
            return base.Channel.GetDataValueAsync(siteId, utcDate, variableId, offsetTypeId, offsetValue);
        }
        
        public HydrologyConsole.Hydro.DataValueCollection GetDataValues(int siteId, System.DateTime utcBeginDate, System.DateTime utcEndDate, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue, System.Nullable<int> stepInHours) {
            return base.Channel.GetDataValues(siteId, utcBeginDate, utcEndDate, variableId, offsetTypeId, offsetValue, stepInHours);
        }
        
        public System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetDataValuesAsync(int siteId, System.DateTime utcBeginDate, System.DateTime utcEndDate, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue, System.Nullable<int> stepInHours) {
            return base.Channel.GetDataValuesAsync(siteId, utcBeginDate, utcEndDate, variableId, offsetTypeId, offsetValue, stepInHours);
        }
        
        public HydrologyConsole.Hydro.DataValueCollection GetDataValuesForReport(int siteId, System.DateTime utcBeginDate, System.DateTime utcEndDate, System.Nullable<int> variableId, int srokUTC, System.Nullable<int> reportId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue) {
            return base.Channel.GetDataValuesForReport(siteId, utcBeginDate, utcEndDate, variableId, srokUTC, reportId, offsetTypeId, offsetValue);
        }
        
        public System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetDataValuesForReportAsync(int siteId, System.DateTime utcBeginDate, System.DateTime utcEndDate, System.Nullable<int> variableId, int srokUTC, System.Nullable<int> reportId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue) {
            return base.Channel.GetDataValuesForReportAsync(siteId, utcBeginDate, utcEndDate, variableId, srokUTC, reportId, offsetTypeId, offsetValue);
        }
        
        public HydrologyConsole.Hydro.DataValueCollection GetAllDataValue(int siteId, System.DateTime utcDate, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue) {
            return base.Channel.GetAllDataValue(siteId, utcDate, variableId, offsetTypeId, offsetValue);
        }
        
        public System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetAllDataValueAsync(int siteId, System.DateTime utcDate, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue) {
            return base.Channel.GetAllDataValueAsync(siteId, utcDate, variableId, offsetTypeId, offsetValue);
        }
        
        public HydrologyConsole.Hydro.DataValueCollection GetAllDataValueLocal(int siteId, System.DateTime date, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue) {
            return base.Channel.GetAllDataValueLocal(siteId, date, variableId, offsetTypeId, offsetValue);
        }
        
        public System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetAllDataValueLocalAsync(int siteId, System.DateTime date, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue) {
            return base.Channel.GetAllDataValueLocalAsync(siteId, date, variableId, offsetTypeId, offsetValue);
        }
        
        public HydrologyCore.Hydro.DataValue GetDataValueLocal(int siteId, System.DateTime date, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue) {
            return base.Channel.GetDataValueLocal(siteId, date, variableId, offsetTypeId, offsetValue);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.DataValue> GetDataValueLocalAsync(int siteId, System.DateTime date, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue) {
            return base.Channel.GetDataValueLocalAsync(siteId, date, variableId, offsetTypeId, offsetValue);
        }
        
        public HydrologyConsole.Hydro.DataValueCollection GetDataValuesLocal(int siteId, System.DateTime beginDate, System.DateTime endDate, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue, System.Nullable<int> stepInHours) {
            return base.Channel.GetDataValuesLocal(siteId, beginDate, endDate, variableId, offsetTypeId, offsetValue, stepInHours);
        }
        
        public System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetDataValuesLocalAsync(int siteId, System.DateTime beginDate, System.DateTime endDate, int variableId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue, System.Nullable<int> stepInHours) {
            return base.Channel.GetDataValuesLocalAsync(siteId, beginDate, endDate, variableId, offsetTypeId, offsetValue, stepInHours);
        }
        
        public HydrologyConsole.Hydro.DataValueCollection GetDataValuesForReportLocal(int siteId, System.DateTime beginDate, System.DateTime endDate, System.Nullable<int> variableId, int srokUTC, System.Nullable<int> reportId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue) {
            return base.Channel.GetDataValuesForReportLocal(siteId, beginDate, endDate, variableId, srokUTC, reportId, offsetTypeId, offsetValue);
        }
        
        public System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetDataValuesForReportLocalAsync(int siteId, System.DateTime beginDate, System.DateTime endDate, System.Nullable<int> variableId, int srokUTC, System.Nullable<int> reportId, System.Nullable<int> offsetTypeId, System.Nullable<float> offsetValue) {
            return base.Channel.GetDataValuesForReportLocalAsync(siteId, beginDate, endDate, variableId, srokUTC, reportId, offsetTypeId, offsetValue);
        }
        
        public HydrologyConsole.Hydro.WaterObjectCollection GetWaterObjects(bool withTree) {
            return base.Channel.GetWaterObjects(withTree);
        }
        
        public System.Threading.Tasks.Task<HydrologyConsole.Hydro.WaterObjectCollection> GetWaterObjectsAsync(bool withTree) {
            return base.Channel.GetWaterObjectsAsync(withTree);
        }
        
        public HydrologyCore.Hydro.Site[] GetSitesWithoutWaterObject() {
            return base.Channel.GetSitesWithoutWaterObject();
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.Site[]> GetSitesWithoutWaterObjectAsync() {
            return base.Channel.GetSitesWithoutWaterObjectAsync();
        }
        
        public HydrologyConsole.Hydro.WaterObjectCollection GetWaterObjectBySite(int siteId) {
            return base.Channel.GetWaterObjectBySite(siteId);
        }
        
        public System.Threading.Tasks.Task<HydrologyConsole.Hydro.WaterObjectCollection> GetWaterObjectBySiteAsync(int siteId) {
            return base.Channel.GetWaterObjectBySiteAsync(siteId);
        }
        
        public void SaveWaterObject(HydrologyCore.Hydro.WaterObject waterObject) {
            base.Channel.SaveWaterObject(waterObject);
        }
        
        public System.Threading.Tasks.Task SaveWaterObjectAsync(HydrologyCore.Hydro.WaterObject waterObject) {
            return base.Channel.SaveWaterObjectAsync(waterObject);
        }
        
        public void SaveWaterObjectOrder(HydrologyConsole.Hydro.WaterObjectCollection coll) {
            base.Channel.SaveWaterObjectOrder(coll);
        }
        
        public System.Threading.Tasks.Task SaveWaterObjectOrderAsync(HydrologyConsole.Hydro.WaterObjectCollection coll) {
            return base.Channel.SaveWaterObjectOrderAsync(coll);
        }
        
        public HydrologyCore.Hydro.GeoType[] GetAllGeoTypes() {
            return base.Channel.GetAllGeoTypes();
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.GeoType[]> GetAllGeoTypesAsync() {
            return base.Channel.GetAllGeoTypesAsync();
        }
        
        public HydrologyCore.Hydro.GeoType GetGeoType(int id) {
            return base.Channel.GetGeoType(id);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.GeoType> GetGeoTypeAsync(int id) {
            return base.Channel.GetGeoTypeAsync(id);
        }
        
        public HydrologyCore.Hydro.ClimateInfo GetLastClimateInfo(int siteId, int climateInfoTypeId, int variableId) {
            return base.Channel.GetLastClimateInfo(siteId, climateInfoTypeId, variableId);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.ClimateInfo> GetLastClimateInfoAsync(int siteId, int climateInfoTypeId, int variableId) {
            return base.Channel.GetLastClimateInfoAsync(siteId, climateInfoTypeId, variableId);
        }
        
        public HydrologyCore.Hydro.Criteria[] GetLastSiteCriteria(int siteId, int variableId, System.Nullable<int> criteriaTypeId) {
            return base.Channel.GetLastSiteCriteria(siteId, variableId, criteriaTypeId);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.Criteria[]> GetLastSiteCriteriaAsync(int siteId, int variableId, System.Nullable<int> criteriaTypeId) {
            return base.Channel.GetLastSiteCriteriaAsync(siteId, variableId, criteriaTypeId);
        }
        
        public HydrologyCore.Hydro.Criteria[] GetSiteCriterias(int siteId) {
            return base.Channel.GetSiteCriterias(siteId);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.Criteria[]> GetSiteCriteriasAsync(int siteId) {
            return base.Channel.GetSiteCriteriasAsync(siteId);
        }
        
        public HydrologyCore.Hydro.Criteria SaveCriteria(HydrologyCore.Hydro.Criteria criteria) {
            return base.Channel.SaveCriteria(criteria);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.Criteria> SaveCriteriaAsync(HydrologyCore.Hydro.Criteria criteria) {
            return base.Channel.SaveCriteriaAsync(criteria);
        }
        
        public HydrologyCore.Hydro.CriteriaType[] GetCriteriaTypes() {
            return base.Channel.GetCriteriaTypes();
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.CriteriaType[]> GetCriteriaTypesAsync() {
            return base.Channel.GetCriteriaTypesAsync();
        }
        
        public HydrologyCore.Hydro.Site[] GetSitesByWaterObject(int waterObjectId) {
            return base.Channel.GetSitesByWaterObject(waterObjectId);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.Site[]> GetSitesByWaterObjectAsync(int waterObjectId) {
            return base.Channel.GetSitesByWaterObjectAsync(waterObjectId);
        }
        
        public HydrologyCore.Hydro.Site[] GetSiteList(System.Nullable<int> siteTypeId) {
            return base.Channel.GetSiteList(siteTypeId);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.Site[]> GetSiteListAsync(System.Nullable<int> siteTypeId) {
            return base.Channel.GetSiteListAsync(siteTypeId);
        }
        
        public HydrologyCore.Hydro.Site GetSite(string siteCode, int typeId) {
            return base.Channel.GetSite(siteCode, typeId);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.Site> GetSiteAsync(string siteCode, int typeId) {
            return base.Channel.GetSiteAsync(siteCode, typeId);
        }
        
        public HydrologyCore.Hydro.Site SaveSiteWithRelation(HydrologyCore.Hydro.Site site, HydrologyCore.Hydro.WaterObject wo) {
            return base.Channel.SaveSiteWithRelation(site, wo);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.Site> SaveSiteWithRelationAsync(HydrologyCore.Hydro.Site site, HydrologyCore.Hydro.WaterObject wo) {
            return base.Channel.SaveSiteWithRelationAsync(site, wo);
        }
        
        public HydrologyCore.Hydro.Site[] GetSiteListWithParent(int siteTypeId) {
            return base.Channel.GetSiteListWithParent(siteTypeId);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.Site[]> GetSiteListWithParentAsync(int siteTypeId) {
            return base.Channel.GetSiteListWithParentAsync(siteTypeId);
        }
        
        public HydrologyConsole.Hydro.SiteTypeCollection GetSiteTypes() {
            return base.Channel.GetSiteTypes();
        }
        
        public System.Threading.Tasks.Task<HydrologyConsole.Hydro.SiteTypeCollection> GetSiteTypesAsync() {
            return base.Channel.GetSiteTypesAsync();
        }
        
        public HydrologyCore.Hydro.Variable GetVariable(int variableId) {
            return base.Channel.GetVariable(variableId);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.Variable> GetVariableAsync(int variableId) {
            return base.Channel.GetVariableAsync(variableId);
        }
        
        public HydrologyConsole.Hydro.VariableCollection GetSiteTypeVariables(int siteTypeId) {
            return base.Channel.GetSiteTypeVariables(siteTypeId);
        }
        
        public System.Threading.Tasks.Task<HydrologyConsole.Hydro.VariableCollection> GetSiteTypeVariablesAsync(int siteTypeId) {
            return base.Channel.GetSiteTypeVariablesAsync(siteTypeId);
        }
        
        public HydrologyConsole.Hydro.SiteGroupCollection GetAllSiteGroups() {
            return base.Channel.GetAllSiteGroups();
        }
        
        public System.Threading.Tasks.Task<HydrologyConsole.Hydro.SiteGroupCollection> GetAllSiteGroupsAsync() {
            return base.Channel.GetAllSiteGroupsAsync();
        }
        
        public HydrologyConsole.Hydro.SiteAttributeCollection GetAttributesForSite(int siteId) {
            return base.Channel.GetAttributesForSite(siteId);
        }
        
        public System.Threading.Tasks.Task<HydrologyConsole.Hydro.SiteAttributeCollection> GetAttributesForSiteAsync(int siteId) {
            return base.Channel.GetAttributesForSiteAsync(siteId);
        }
        
        public HydrologyCore.Hydro.SiteAttributeType[] GetSiteAttributeTypes(int siteTypeId) {
            return base.Channel.GetSiteAttributeTypes(siteTypeId);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.SiteAttributeType[]> GetSiteAttributeTypesAsync(int siteTypeId) {
            return base.Channel.GetSiteAttributeTypesAsync(siteTypeId);
        }
        
        public void SaveSiteAttribute(HydrologyCore.Hydro.SiteAttribute attr) {
            base.Channel.SaveSiteAttribute(attr);
        }
        
        public System.Threading.Tasks.Task SaveSiteAttributeAsync(HydrologyCore.Hydro.SiteAttribute attr) {
            return base.Channel.SaveSiteAttributeAsync(attr);
        }
        
        public HydrologyCore.Hydro.SiteAttribute GetSiteAttribute(int siteId, int siteAttrTypeId) {
            return base.Channel.GetSiteAttribute(siteId, siteAttrTypeId);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.SiteAttribute> GetSiteAttributeAsync(int siteId, int siteAttrTypeId) {
            return base.Channel.GetSiteAttributeAsync(siteId, siteAttrTypeId);
        }
        
        public HydrologyCore.Hydro.SensorDifference GetSensorDifferences(HydrologyCore.Hydro.Site site1, HydrologyCore.Hydro.Site site2, int variableId, System.DateTime utcBeginDate, System.DateTime utcEndDate, float delta) {
            return base.Channel.GetSensorDifferences(site1, site2, variableId, utcBeginDate, utcEndDate, delta);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.SensorDifference> GetSensorDifferencesAsync(HydrologyCore.Hydro.Site site1, HydrologyCore.Hydro.Site site2, int variableId, System.DateTime utcBeginDate, System.DateTime utcEndDate, float delta) {
            return base.Channel.GetSensorDifferencesAsync(site1, site2, variableId, utcBeginDate, utcEndDate, delta);
        }
        
        public HydrologyConsole.Hydro.DataValueCollection GetDataValueFromId(int siteId, int variableId, int dataValueId, bool isCalc) {
            return base.Channel.GetDataValueFromId(siteId, variableId, dataValueId, isCalc);
        }
        
        public System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetDataValueFromIdAsync(int siteId, int variableId, int dataValueId, bool isCalc) {
            return base.Channel.GetDataValueFromIdAsync(siteId, variableId, dataValueId, isCalc);
        }
        
        public HydrologyCore.Hydro.DataSource GetDataSource(int id) {
            return base.Channel.GetDataSource(id);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.DataSource> GetDataSourceAsync(int id) {
            return base.Channel.GetDataSourceAsync(id);
        }
        
        public HydrologyCore.Hydro.Curve GetCurve(int siteId, int variableXId, int variableYId) {
            return base.Channel.GetCurve(siteId, variableXId, variableYId);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.Curve> GetCurveAsync(int siteId, int variableXId, int variableYId) {
            return base.Channel.GetCurveAsync(siteId, variableXId, variableYId);
        }
        
        public HydrologyCore.Hydro.Qualifier[] GetQualifiers() {
            return base.Channel.GetQualifiers();
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.Qualifier[]> GetQualifiersAsync() {
            return base.Channel.GetQualifiersAsync();
        }
        
        public HydrologyCore.Hydro.Category[] GetCategory(int variableId, System.Nullable<int> datavalue) {
            return base.Channel.GetCategory(variableId, datavalue);
        }
        
        public System.Threading.Tasks.Task<HydrologyCore.Hydro.Category[]> GetCategoryAsync(int variableId, System.Nullable<int> datavalue) {
            return base.Channel.GetCategoryAsync(variableId, datavalue);
        }
        
        public HydrologyConsole.Hydro.DataValueCollection GetData(int siteId, int sourceTypeId, System.DateTime utcDate, int variableId, System.Nullable<int> duration) {
            return base.Channel.GetData(siteId, sourceTypeId, utcDate, variableId, duration);
        }
        
        public System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetDataAsync(int siteId, int sourceTypeId, System.DateTime utcDate, int variableId, System.Nullable<int> duration) {
            return base.Channel.GetDataAsync(siteId, sourceTypeId, utcDate, variableId, duration);
        }
        
        public HydrologyConsole.Hydro.DataValueCollection GetDataByFormDate(int siteId, int sourceTypeId, System.DateTime utcDate, int variableId, System.Nullable<int> duration, System.Nullable<System.DateTime> dateForm) {
            return base.Channel.GetDataByFormDate(siteId, sourceTypeId, utcDate, variableId, duration, dateForm);
        }
        
        public System.Threading.Tasks.Task<HydrologyConsole.Hydro.DataValueCollection> GetDataByFormDateAsync(int siteId, int sourceTypeId, System.DateTime utcDate, int variableId, System.Nullable<int> duration, System.Nullable<System.DateTime> dateForm) {
            return base.Channel.GetDataByFormDateAsync(siteId, sourceTypeId, utcDate, variableId, duration, dateForm);
        }
        
        public HydrologyConsole.Hydro.VariableCollection GetAllVariables() {
            return base.Channel.GetAllVariables();
        }
        
        public System.Threading.Tasks.Task<HydrologyConsole.Hydro.VariableCollection> GetAllVariablesAsync() {
            return base.Channel.GetAllVariablesAsync();
        }
    }
}
